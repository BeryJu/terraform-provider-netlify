// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/netlify/terraform-provider-netlify/internal/models"
)

// ConfigureDNSForSiteReader is a Reader for the ConfigureDNSForSite structure.
type ConfigureDNSForSiteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ConfigureDNSForSiteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewConfigureDNSForSiteOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewConfigureDNSForSiteDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewConfigureDNSForSiteOK creates a ConfigureDNSForSiteOK with default headers values
func NewConfigureDNSForSiteOK() *ConfigureDNSForSiteOK {
	return &ConfigureDNSForSiteOK{}
}

/*
ConfigureDNSForSiteOK describes a response with status code 200, with default header values.

OK
*/
type ConfigureDNSForSiteOK struct {
	Payload []*models.DNSZone
}

// IsSuccess returns true when this configure Dns for site o k response has a 2xx status code
func (o *ConfigureDNSForSiteOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this configure Dns for site o k response has a 3xx status code
func (o *ConfigureDNSForSiteOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this configure Dns for site o k response has a 4xx status code
func (o *ConfigureDNSForSiteOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this configure Dns for site o k response has a 5xx status code
func (o *ConfigureDNSForSiteOK) IsServerError() bool {
	return false
}

// IsCode returns true when this configure Dns for site o k response a status code equal to that given
func (o *ConfigureDNSForSiteOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the configure Dns for site o k response
func (o *ConfigureDNSForSiteOK) Code() int {
	return 200
}

func (o *ConfigureDNSForSiteOK) Error() string {
	return fmt.Sprintf("[PUT /sites/{site_id}/dns][%d] configureDnsForSiteOK  %+v", 200, o.Payload)
}

func (o *ConfigureDNSForSiteOK) String() string {
	return fmt.Sprintf("[PUT /sites/{site_id}/dns][%d] configureDnsForSiteOK  %+v", 200, o.Payload)
}

func (o *ConfigureDNSForSiteOK) GetPayload() []*models.DNSZone {
	return o.Payload
}

func (o *ConfigureDNSForSiteOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfigureDNSForSiteDefault creates a ConfigureDNSForSiteDefault with default headers values
func NewConfigureDNSForSiteDefault(code int) *ConfigureDNSForSiteDefault {
	return &ConfigureDNSForSiteDefault{
		_statusCode: code,
	}
}

/*
ConfigureDNSForSiteDefault describes a response with status code -1, with default header values.

error
*/
type ConfigureDNSForSiteDefault struct {
	_statusCode int

	Payload *models.Error
}

// IsSuccess returns true when this configure DNS for site default response has a 2xx status code
func (o *ConfigureDNSForSiteDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this configure DNS for site default response has a 3xx status code
func (o *ConfigureDNSForSiteDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this configure DNS for site default response has a 4xx status code
func (o *ConfigureDNSForSiteDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this configure DNS for site default response has a 5xx status code
func (o *ConfigureDNSForSiteDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this configure DNS for site default response a status code equal to that given
func (o *ConfigureDNSForSiteDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the configure DNS for site default response
func (o *ConfigureDNSForSiteDefault) Code() int {
	return o._statusCode
}

func (o *ConfigureDNSForSiteDefault) Error() string {
	return fmt.Sprintf("[PUT /sites/{site_id}/dns][%d] configureDNSForSite default  %+v", o._statusCode, o.Payload)
}

func (o *ConfigureDNSForSiteDefault) String() string {
	return fmt.Sprintf("[PUT /sites/{site_id}/dns][%d] configureDNSForSite default  %+v", o._statusCode, o.Payload)
}

func (o *ConfigureDNSForSiteDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *ConfigureDNSForSiteDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
